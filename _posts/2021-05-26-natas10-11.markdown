---
layout: post
title:  "Natas Level 10 â†’ Level 11"
date:   2021-05-26 09:17:35
categories: ctf wargames web-security
tags: wargames ctf overthewire web-security
series: "OverTheWire: Natas"
excerpt: That's the way the cookie crumbles
mathjax: false
---

## Level Goal
Excluding the URL and username, the Level Goal section is blank for the Natas ctf.


## Solution
Logging into the natas11 site, we see a message stating that the cookie is encrypted with XOR, we can change the background color, and a link to the source code.  Let's look at the source code.

```php
<?
$defaultdata = array( "showpassword"=>"no", "bgcolor"=>"#ffffff");

function xor_encrypt($in) {
    $key = '<censored>';
    $text = $in;
    $outText = '';

    // Iterate through each character
    for($i=0;$i<strlen($text);$i++) {
    $outText .= $text[$i] ^ $key[$i % strlen($key)];
    }

    return $outText;
}

function loadData($def) {
    global $_COOKIE;
    $mydata = $def;
    if(array_key_exists("data", $_COOKIE)) {
    $tempdata = json_decode(xor_encrypt(base64_decode($_COOKIE["data"])), true);
    if(is_array($tempdata) && array_key_exists("showpassword", $tempdata) && array_key_exists("bgcolor", $tempdata)) {
        if (preg_match('/^#(?:[a-f\d]{6})$/i', $tempdata['bgcolor'])) {
        $mydata['showpassword'] = $tempdata['showpassword'];
        $mydata['bgcolor'] = $tempdata['bgcolor'];
        }
    }
    }
    return $mydata;
}

function saveData($d) {
    setcookie("data", base64_encode(xor_encrypt(json_encode($d))));
}

$data = loadData($defaultdata);

if(array_key_exists("bgcolor",$_REQUEST)) {
    if (preg_match('/^#(?:[a-f\d]{6})$/i', $_REQUEST['bgcolor'])) {
        $data['bgcolor'] = $_REQUEST['bgcolor'];
    }
}

saveData($data);
?>
```

Looking at the code we can see the key is censored, but the defaultData is not. We also know that the these two pieces of data are XOR'd and base64 encoded, by looking at the saveData function. By XOR'ing the cookie with the defaultData, we'll get the key used to encrypt the data. Once we have that key, we can edit defaultData to set showpassword to yes, encrypt the cookie and set that cookie in the browser.

First thing you'll need to do is get the cookie value. Open the developer tools in your browser (F12 in Firefox) and click on Storage. Copy the cookie value into your notes. NOTE: The cookie will end in %3D. This is URL encoded equal sign. Change the %3D to =.

Next we'll need to lightly modify the code used by natas11 to generate the key for us. Since almost all the work is done for us, I've opted to stay with php instead of rewriting the code in another language. I used the sandbox at [Online PHP Functions](https://sandbox.onlinephpfunctions.com/) to run the php code without needing to install anything special on my computer. Feel free to install php locally or use another website.

To get the key, we'll need to slightly modify the xor_encrypt function. The original function only took one parameter, we're going to send two. We're reusing the variable name key, as it was used in the original function. This is equal parts laziness on my behalf and also allows you to see what was actually changed. Actually, its mostly laziness.

We need to comment out or delete the key declaration from within the function.

Below the function we have three new lines; two variables and an echo to display the results. One is the unmodified defaultData, the other is the value of cookie from the browser. You'll need to supply this yourself.

Run the following code in your php environment of choice.
```php
<?
function xor_encrypt($in, $key) {
    //$key = '<censored>';
    $text = $in;
    $outText = '';

    // Iterate through each character
    for($i=0;$i<strlen($text);$i++) {
    $outText .= $text[$i] ^ $key[$i % strlen($key)];
    }

    return $outText;
}

$cookie = "C------------------------------------------------------=";
$key = json_encode(array( "showpassword"=>"no", "bgcolor"=>"#ffffff"));

echo(xor_encrypt(base64_decode($cookie), $key));
```

You should get a repeating string of 4 characters. These 4 characters are the key used to encrypt the cookie. With this, we can change create our own cookie that sets showpassword to yes, and will be valid for the site. 

You'll need to provide the 4-character key generated by the previous script. The value of showpassword has already been set to yes.

```php
<?
function xor_encrypt($in, $key) {
    //$key = '<censored>';
    $text = $in;
    $outText = '';

    // Iterate through each character
    for($i=0;$i<strlen($text);$i++) {
    $outText .= $text[$i] ^ $key[$i % strlen($key)];
    }

    return $outText;
}

$cookie = json_encode(array( "showpassword"=>"yes", "bgcolor"=>"#ffffff"));
$key = "q--J";  // replace q--J with the key discovered by the previous script

echo(base64_encode(xor_encrypt($cookie, $key)));
```

The response you get back is the new cookie. Copy this value and go back to your developer tools and delete the old cookie value, and paste this value in its place.  Reload the page and you'll see the password for the next level.

